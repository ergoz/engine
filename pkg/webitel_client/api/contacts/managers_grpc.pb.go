// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.6
// source: contacts/managers.proto

package contacts

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Managers_GetManagers_FullMethodName = "/webitel.contacts.Managers/GetManagers"
	Managers_AddManagers_FullMethodName = "/webitel.contacts.Managers/AddManagers"
	Managers_SetManagers_FullMethodName = "/webitel.contacts.Managers/SetManagers"
	Managers_DelManagers_FullMethodName = "/webitel.contacts.Managers/DelManagers"
)

// ManagersClient is the client API for Managers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagersClient interface {
	// Search the Contact's Label(s).
	GetManagers(ctx context.Context, in *SearchManagersRequest, opts ...grpc.CallOption) (*ManagerList, error)
	// Associate new Labels to the Contact.
	AddManagers(ctx context.Context, in *CreateManagersRequest, opts ...grpc.CallOption) (*ManagerList, error)
	// Reset Labels to fit the specified final set.
	SetManagers(ctx context.Context, in *UpdateManagersRequest, opts ...grpc.CallOption) (*ManagerList, error)
	// Remove Contact Labels associations.
	DelManagers(ctx context.Context, in *DeleteManagersRequest, opts ...grpc.CallOption) (*ManagerList, error)
}

type managersClient struct {
	cc grpc.ClientConnInterface
}

func NewManagersClient(cc grpc.ClientConnInterface) ManagersClient {
	return &managersClient{cc}
}

func (c *managersClient) GetManagers(ctx context.Context, in *SearchManagersRequest, opts ...grpc.CallOption) (*ManagerList, error) {
	out := new(ManagerList)
	err := c.cc.Invoke(ctx, Managers_GetManagers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managersClient) AddManagers(ctx context.Context, in *CreateManagersRequest, opts ...grpc.CallOption) (*ManagerList, error) {
	out := new(ManagerList)
	err := c.cc.Invoke(ctx, Managers_AddManagers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managersClient) SetManagers(ctx context.Context, in *UpdateManagersRequest, opts ...grpc.CallOption) (*ManagerList, error) {
	out := new(ManagerList)
	err := c.cc.Invoke(ctx, Managers_SetManagers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managersClient) DelManagers(ctx context.Context, in *DeleteManagersRequest, opts ...grpc.CallOption) (*ManagerList, error) {
	out := new(ManagerList)
	err := c.cc.Invoke(ctx, Managers_DelManagers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagersServer is the server API for Managers service.
// All implementations must embed UnimplementedManagersServer
// for forward compatibility
type ManagersServer interface {
	// Search the Contact's Label(s).
	GetManagers(context.Context, *SearchManagersRequest) (*ManagerList, error)
	// Associate new Labels to the Contact.
	AddManagers(context.Context, *CreateManagersRequest) (*ManagerList, error)
	// Reset Labels to fit the specified final set.
	SetManagers(context.Context, *UpdateManagersRequest) (*ManagerList, error)
	// Remove Contact Labels associations.
	DelManagers(context.Context, *DeleteManagersRequest) (*ManagerList, error)
	mustEmbedUnimplementedManagersServer()
}

// UnimplementedManagersServer must be embedded to have forward compatible implementations.
type UnimplementedManagersServer struct {
}

func (UnimplementedManagersServer) GetManagers(context.Context, *SearchManagersRequest) (*ManagerList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManagers not implemented")
}
func (UnimplementedManagersServer) AddManagers(context.Context, *CreateManagersRequest) (*ManagerList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddManagers not implemented")
}
func (UnimplementedManagersServer) SetManagers(context.Context, *UpdateManagersRequest) (*ManagerList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetManagers not implemented")
}
func (UnimplementedManagersServer) DelManagers(context.Context, *DeleteManagersRequest) (*ManagerList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelManagers not implemented")
}
func (UnimplementedManagersServer) mustEmbedUnimplementedManagersServer() {}

// UnsafeManagersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagersServer will
// result in compilation errors.
type UnsafeManagersServer interface {
	mustEmbedUnimplementedManagersServer()
}

func RegisterManagersServer(s grpc.ServiceRegistrar, srv ManagersServer) {
	s.RegisterService(&Managers_ServiceDesc, srv)
}

func _Managers_GetManagers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchManagersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagersServer).GetManagers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Managers_GetManagers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagersServer).GetManagers(ctx, req.(*SearchManagersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Managers_AddManagers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateManagersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagersServer).AddManagers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Managers_AddManagers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagersServer).AddManagers(ctx, req.(*CreateManagersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Managers_SetManagers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateManagersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagersServer).SetManagers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Managers_SetManagers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagersServer).SetManagers(ctx, req.(*UpdateManagersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Managers_DelManagers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteManagersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagersServer).DelManagers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Managers_DelManagers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagersServer).DelManagers(ctx, req.(*DeleteManagersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Managers_ServiceDesc is the grpc.ServiceDesc for Managers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Managers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webitel.contacts.Managers",
	HandlerType: (*ManagersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetManagers",
			Handler:    _Managers_GetManagers_Handler,
		},
		{
			MethodName: "AddManagers",
			Handler:    _Managers_AddManagers_Handler,
		},
		{
			MethodName: "SetManagers",
			Handler:    _Managers_SetManagers_Handler,
		},
		{
			MethodName: "DelManagers",
			Handler:    _Managers_DelManagers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contacts/managers.proto",
}
