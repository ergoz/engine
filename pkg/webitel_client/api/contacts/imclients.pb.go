// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.6
// source: contacts/imclients.proto

package contacts

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/genproto/googleapis/api/visibility"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A contact's [I]nstant[M]essaging client.
type IMClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID of the association. Never changes.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Version of the latest update. Numeric sequence.
	Ver int32 `protobuf:"varint,2,opt,name=ver,proto3" json:"ver,omitempty"`
	// Unique ID of the latest version of the update.
	// This ID changes after any update to the underlying value(s).
	Etag string `protobuf:"bytes,3,opt,name=etag,proto3" json:"etag,omitempty"`
	// The user who created this Field.
	CreatedAt int64 `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp(milli) of the Field creation.
	CreatedBy *Lookup `protobuf:"bytes,6,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// Timestamp(milli) of the last Field update.
	// Take part in Etag generation.
	UpdatedAt int64 `protobuf:"varint,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// The user who performed last Update.
	UpdatedBy *Lookup `protobuf:"bytes,8,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// End-User account used in the IM client.
	User *Lookup `protobuf:"bytes,11,opt,name=user,proto3" json:"user,omitempty"`
	// App (Text-Gateway) used to connect the IM client.
	App *Lookup `protobuf:"bytes,12,opt,name=app,proto3" json:"app,omitempty"`
	// [Via] App(-specific) peer(-id) to connect[from] the IM client.
	Via string `protobuf:"bytes,13,opt,name=via,proto3" json:"via,omitempty"`
}

func (x *IMClient) Reset() {
	*x = IMClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contacts_imclients_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMClient) ProtoMessage() {}

func (x *IMClient) ProtoReflect() protoreflect.Message {
	mi := &file_contacts_imclients_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMClient.ProtoReflect.Descriptor instead.
func (*IMClient) Descriptor() ([]byte, []int) {
	return file_contacts_imclients_proto_rawDescGZIP(), []int{0}
}

func (x *IMClient) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IMClient) GetVer() int32 {
	if x != nil {
		return x.Ver
	}
	return 0
}

func (x *IMClient) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *IMClient) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *IMClient) GetCreatedBy() *Lookup {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *IMClient) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *IMClient) GetUpdatedBy() *Lookup {
	if x != nil {
		return x.UpdatedBy
	}
	return nil
}

func (x *IMClient) GetUser() *Lookup {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *IMClient) GetApp() *Lookup {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *IMClient) GetVia() string {
	if x != nil {
		return x.Via
	}
	return ""
}

// Input of the contact IM client.
type InputIMClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ID of the latest version of an existing resorce.
	Etag string `protobuf:"bytes,1,opt,name=etag,proto3" json:"etag,omitempty"`
	// End-User account used in the IM client.
	User *Lookup `protobuf:"bytes,11,opt,name=user,proto3" json:"user,omitempty"`
	// App (Text-Gateway) used to connect the IM client.
	App *Lookup `protobuf:"bytes,12,opt,name=app,proto3" json:"app,omitempty"`
	// [Via] App(-specific) peer(-id) to connect[from] the IM client.
	Via string `protobuf:"bytes,13,opt,name=via,proto3" json:"via,omitempty"`
}

func (x *InputIMClient) Reset() {
	*x = InputIMClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contacts_imclients_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputIMClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputIMClient) ProtoMessage() {}

func (x *InputIMClient) ProtoReflect() protoreflect.Message {
	mi := &file_contacts_imclients_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputIMClient.ProtoReflect.Descriptor instead.
func (*InputIMClient) Descriptor() ([]byte, []int) {
	return file_contacts_imclients_proto_rawDescGZIP(), []int{1}
}

func (x *InputIMClient) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *InputIMClient) GetUser() *Lookup {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *InputIMClient) GetApp() *Lookup {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *InputIMClient) GetVia() string {
	if x != nil {
		return x.Via
	}
	return ""
}

type IMClientList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IMClient dataset page.
	Data []*IMClient `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	// The page number of the partial result.
	Page int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// Indicates that this is a partial result.
	// More data available upon query: ?size=${data.len}&page=${page++}
	Next bool `protobuf:"varint,3,opt,name=next,proto3" json:"next,omitempty"`
}

func (x *IMClientList) Reset() {
	*x = IMClientList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contacts_imclients_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IMClientList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMClientList) ProtoMessage() {}

func (x *IMClientList) ProtoReflect() protoreflect.Message {
	mi := &file_contacts_imclients_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMClientList.ProtoReflect.Descriptor instead.
func (*IMClientList) Descriptor() ([]byte, []int) {
	return file_contacts_imclients_proto_rawDescGZIP(), []int{2}
}

func (x *IMClientList) GetData() []*IMClient {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *IMClientList) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *IMClientList) GetNext() bool {
	if x != nil {
		return x.Next
	}
	return false
}

// Locate link by unique IDentifier.
type LocateIMClientRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fields to be retrieved into result.
	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	// Link contact ID.
	ContactId string `protobuf:"bytes,2,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	// Link unique ID.
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *LocateIMClientRequest) Reset() {
	*x = LocateIMClientRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contacts_imclients_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocateIMClientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocateIMClientRequest) ProtoMessage() {}

func (x *LocateIMClientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contacts_imclients_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocateIMClientRequest.ProtoReflect.Descriptor instead.
func (*LocateIMClientRequest) Descriptor() ([]byte, []int) {
	return file_contacts_imclients_proto_rawDescGZIP(), []int{3}
}

func (x *LocateIMClientRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *LocateIMClientRequest) GetContactId() string {
	if x != nil {
		return x.ContactId
	}
	return ""
}

func (x *LocateIMClientRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SearchIMClientsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Page number of result dataset records. offset = (page*size)
	Page int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// Size count of records on result page. limit = (size++)
	Size int32 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	// Search term: IMClient.
	// `?` - matches any one character
	// `*` - matches 0 or more characters
	// Search fields: {user,app}
	Q string `protobuf:"bytes,6,opt,name=q,proto3" json:"q,omitempty"`
	// Sort the result according to fields.
	Sort []string `protobuf:"bytes,3,rep,name=sort,proto3" json:"sort,omitempty"`
	// Fields to be retrieved into result.
	Fields []string `protobuf:"bytes,4,rep,name=fields,proto3" json:"fields,omitempty"`
	// Link contact ID.
	ContactId int64 `protobuf:"varint,5,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	// Link(s) with unique ID only.
	Id []string `protobuf:"bytes,7,rep,name=id,proto3" json:"id,omitempty"`
}

func (x *SearchIMClientsRequest) Reset() {
	*x = SearchIMClientsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contacts_imclients_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchIMClientsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchIMClientsRequest) ProtoMessage() {}

func (x *SearchIMClientsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contacts_imclients_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchIMClientsRequest.ProtoReflect.Descriptor instead.
func (*SearchIMClientsRequest) Descriptor() ([]byte, []int) {
	return file_contacts_imclients_proto_rawDescGZIP(), []int{4}
}

func (x *SearchIMClientsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchIMClientsRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SearchIMClientsRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *SearchIMClientsRequest) GetSort() []string {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *SearchIMClientsRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *SearchIMClientsRequest) GetContactId() int64 {
	if x != nil {
		return x.ContactId
	}
	return 0
}

func (x *SearchIMClientsRequest) GetId() []string {
	if x != nil {
		return x.Id
	}
	return nil
}

type CreateIMClientsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fields to be retrieved into result of changes.
	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	// Link contact ID.
	ContactId string `protobuf:"bytes,2,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	// Fixed set of IM client(s) to be linked with the contact.
	// IM client(s) that conflicts(user.id) with already linked will be updated.
	Input []*InputIMClient `protobuf:"bytes,3,rep,name=input,proto3" json:"input,omitempty"`
}

func (x *CreateIMClientsRequest) Reset() {
	*x = CreateIMClientsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contacts_imclients_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIMClientsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIMClientsRequest) ProtoMessage() {}

func (x *CreateIMClientsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contacts_imclients_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIMClientsRequest.ProtoReflect.Descriptor instead.
func (*CreateIMClientsRequest) Descriptor() ([]byte, []int) {
	return file_contacts_imclients_proto_rawDescGZIP(), []int{5}
}

func (x *CreateIMClientsRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *CreateIMClientsRequest) GetContactId() string {
	if x != nil {
		return x.ContactId
	}
	return ""
}

func (x *CreateIMClientsRequest) GetInput() []*InputIMClient {
	if x != nil {
		return x.Input
	}
	return nil
}

type UpdateIMClientsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fields to be retrieved into result of changes.
	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	// Link contact ID.
	ContactId int64 `protobuf:"varint,2,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	// Final set of IM-client(s) to be linked with the contact.
	// IM-client(s) that are already linked with the contact
	// but not given in here will be removed.
	Input []*InputIMClient `protobuf:"bytes,3,rep,name=input,proto3" json:"input,omitempty"`
}

func (x *UpdateIMClientsRequest) Reset() {
	*x = UpdateIMClientsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contacts_imclients_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIMClientsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIMClientsRequest) ProtoMessage() {}

func (x *UpdateIMClientsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contacts_imclients_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIMClientsRequest.ProtoReflect.Descriptor instead.
func (*UpdateIMClientsRequest) Descriptor() ([]byte, []int) {
	return file_contacts_imclients_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateIMClientsRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *UpdateIMClientsRequest) GetContactId() int64 {
	if x != nil {
		return x.ContactId
	}
	return 0
}

func (x *UpdateIMClientsRequest) GetInput() []*InputIMClient {
	if x != nil {
		return x.Input
	}
	return nil
}

type UpdateIMClientRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// JSON PATCH fields mask.
	// List of JPath fields specified in body(input).
	XJsonMask []string `protobuf:"bytes,1,rep,name=x_json_mask,json=xJsonMask,proto3" json:"x_json_mask,omitempty"`
	// Fields to be retrieved into result of changes.
	Fields []string `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
	// Link contact ID.
	ContactId int64 `protobuf:"varint,3,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	// NEW Update of the IM-client account.
	Input *InputIMClient `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *UpdateIMClientRequest) Reset() {
	*x = UpdateIMClientRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contacts_imclients_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIMClientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIMClientRequest) ProtoMessage() {}

func (x *UpdateIMClientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contacts_imclients_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIMClientRequest.ProtoReflect.Descriptor instead.
func (*UpdateIMClientRequest) Descriptor() ([]byte, []int) {
	return file_contacts_imclients_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateIMClientRequest) GetXJsonMask() []string {
	if x != nil {
		return x.XJsonMask
	}
	return nil
}

func (x *UpdateIMClientRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *UpdateIMClientRequest) GetContactId() int64 {
	if x != nil {
		return x.ContactId
	}
	return 0
}

func (x *UpdateIMClientRequest) GetInput() *InputIMClient {
	if x != nil {
		return x.Input
	}
	return nil
}

type DeleteIMClientsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fields to be retrieved into result of changes.
	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	// Link contact ID.
	ContactId int64 `protobuf:"varint,2,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	// Set of unique link.ID(s) to be removed.
	Etag []string `protobuf:"bytes,3,rep,name=etag,proto3" json:"etag,omitempty"`
}

func (x *DeleteIMClientsRequest) Reset() {
	*x = DeleteIMClientsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contacts_imclients_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIMClientsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIMClientsRequest) ProtoMessage() {}

func (x *DeleteIMClientsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contacts_imclients_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIMClientsRequest.ProtoReflect.Descriptor instead.
func (*DeleteIMClientsRequest) Descriptor() ([]byte, []int) {
	return file_contacts_imclients_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteIMClientsRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *DeleteIMClientsRequest) GetContactId() int64 {
	if x != nil {
		return x.ContactId
	}
	return 0
}

func (x *DeleteIMClientsRequest) GetEtag() []string {
	if x != nil {
		return x.Etag
	}
	return nil
}

type DeleteIMClientRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fields to be retrieved into result of changes.
	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	// Link contact ID.
	ContactId int64 `protobuf:"varint,2,opt,name=contact_id,json=contactId,proto3" json:"contact_id,omitempty"`
	// Link unique ID to be removed.
	Etag string `protobuf:"bytes,3,opt,name=etag,proto3" json:"etag,omitempty"`
}

func (x *DeleteIMClientRequest) Reset() {
	*x = DeleteIMClientRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contacts_imclients_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIMClientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIMClientRequest) ProtoMessage() {}

func (x *DeleteIMClientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_contacts_imclients_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIMClientRequest.ProtoReflect.Descriptor instead.
func (*DeleteIMClientRequest) Descriptor() ([]byte, []int) {
	return file_contacts_imclients_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteIMClientRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *DeleteIMClientRequest) GetContactId() int64 {
	if x != nil {
		return x.ContactId
	}
	return 0
}

func (x *DeleteIMClientRequest) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

var File_contacts_imclients_proto protoreflect.FileDescriptor

var file_contacts_imclients_proto_rawDesc = []byte{
	0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x69, 0x6d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x77, 0x65, 0x62, 0x69,
	0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x1a, 0x15, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x99,
	0x03, 0x0a, 0x08, 0x49, 0x4d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x76,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61,
	0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x37, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77,
	0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x69, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x73, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x4a, 0x36,
	0x7b, 0x22, 0x69, 0x64, 0x22, 0x3a, 0x22, 0x35, 0x39, 0x36, 0x34, 0x31, 0x37, 0x33, 0x34, 0x33,
	0x22, 0x2c, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72,
	0x61, 0x6d, 0x22, 0x2c, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x22, 0x4a, 0x6f, 0x68, 0x6e,
	0x20, 0x44, 0x6f, 0x65, 0x22, 0x7d, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x03,
	0x61, 0x70, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x65, 0x62, 0x69,
	0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x61, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x69, 0x61, 0x22, 0xe9, 0x01, 0x0a, 0x0d, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x49, 0x4d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x04,
	0x65, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0xca,
	0x3e, 0x07, 0xfa, 0x02, 0x04, 0x65, 0x74, 0x61, 0x67, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12,
	0x69, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x42, 0x3b, 0x92, 0x41, 0x38, 0x4a, 0x36, 0x7b, 0x22,
	0x69, 0x64, 0x22, 0x3a, 0x22, 0x35, 0x39, 0x36, 0x34, 0x31, 0x37, 0x33, 0x34, 0x33, 0x22, 0x2c,
	0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d,
	0x22, 0x2c, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x22, 0x4a, 0x6f, 0x68, 0x6e, 0x20, 0x44,
	0x6f, 0x65, 0x22, 0x7d, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70,
	0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65,
	0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x61, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x69, 0x61, 0x3a, 0x0c, 0x92, 0x41, 0x09, 0x0a, 0x07, 0xd2,
	0x01, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x66, 0x0a, 0x0c, 0x49, 0x4d, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x49, 0x4d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65,
	0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x22, 0x68,
	0x0a, 0x15, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x49, 0x4d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0x92, 0x41, 0x05, 0xd2,
	0x01, 0x02, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa9, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x49, 0x4d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x71,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x8e, 0x03, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x4d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0xbc, 0x02, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x49,
	0x4d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x84, 0x02, 0x92, 0x41, 0x80, 0x02, 0x4a, 0xfd,
	0x01, 0x5b, 0x7b, 0x22, 0x75, 0x73, 0x65, 0x72, 0x22, 0x3a, 0x7b, 0x22, 0x69, 0x64, 0x22, 0x3a,
	0x22, 0x35, 0x39, 0x36, 0x34, 0x31, 0x31, 0x33, 0x22, 0x2c, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x3a, 0x22, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x6d, 0x22, 0x2c, 0x22, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x3a, 0x22, 0x4a, 0x6f, 0x68, 0x6e, 0x6e, 0x79, 0x20, 0x44, 0x6f, 0x65, 0x22, 0x7d,
	0x2c, 0x22, 0x61, 0x70, 0x70, 0x22, 0x3a, 0x7b, 0x22, 0x69, 0x64, 0x22, 0x3a, 0x22, 0x33, 0x35,
	0x37, 0x22, 0x2c, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x74, 0x65, 0x6c, 0x65, 0x67,
	0x72, 0x61, 0x6d, 0x22, 0x2c, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x22, 0x54, 0x47, 0x42,
	0x6f, 0x74, 0x22, 0x7d, 0x7d, 0x2c, 0x7b, 0x22, 0x75, 0x73, 0x65, 0x72, 0x22, 0x3a, 0x7b, 0x22,
	0x69, 0x64, 0x22, 0x3a, 0x22, 0x39, 0x37, 0x33, 0x39, 0x37, 0x35, 0x34, 0x37, 0x37, 0x35, 0x34,
	0x37, 0x37, 0x33, 0x22, 0x2c, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x22, 0x2c, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x22,
	0x6a, 0x2e, 0x64, 0x6f, 0x65, 0x22, 0x7d, 0x2c, 0x22, 0x61, 0x70, 0x70, 0x22, 0x3a, 0x7b, 0x22,
	0x69, 0x64, 0x22, 0x3a, 0x22, 0x32, 0x33, 0x22, 0x2c, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a,
	0x22, 0x6d, 0x65, 0x74, 0x61, 0x22, 0x2c, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x22, 0x46,
	0x42, 0x26, 0x49, 0x47, 0x22, 0x7d, 0x2c, 0x22, 0x76, 0x69, 0x61, 0x22, 0x3a, 0x22, 0x39, 0x36,
	0x38, 0x37, 0x34, 0x36, 0x34, 0x32, 0x33, 0x35, 0x34, 0x32, 0x35, 0x22, 0x7d, 0x5d, 0x52, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0xa0, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x4d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x49,
	0x4d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x09, 0x92, 0x41, 0x06, 0xa8, 0x01, 0x01, 0xb0,
	0x01, 0x01, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x0d, 0x92, 0x41, 0x0a, 0x0a, 0x08,
	0xd2, 0x01, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0xcf, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x4d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x78, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x07, 0x40, 0x01, 0x8a, 0x01,
	0x02, 0x5e, 0x24, 0xfa, 0xd2, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x50, 0x52, 0x45, 0x56, 0x49,
	0x45, 0x57, 0x52, 0x09, 0x78, 0x4a, 0x73, 0x6f, 0x6e, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x4d, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x0d, 0x92, 0x41, 0x0a,
	0x0a, 0x08, 0xd2, 0x01, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x7c, 0x0a, 0x16, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x49, 0x4d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x65,
	0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x09, 0x92, 0x41, 0x06, 0xa8, 0x01,
	0x01, 0xb0, 0x01, 0x01, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x3a, 0x0c, 0x92, 0x41, 0x09, 0x0a,
	0x07, 0xd2, 0x01, 0x04, 0x65, 0x74, 0x61, 0x67, 0x22, 0x75, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x49, 0x4d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0x92, 0x41, 0x00, 0x52, 0x04, 0x65, 0x74, 0x61,
	0x67, 0x3a, 0x0c, 0x92, 0x41, 0x09, 0x0a, 0x07, 0xd2, 0x01, 0x04, 0x65, 0x74, 0x61, 0x67, 0x32,
	0xae, 0x08, 0x0a, 0x09, 0x49, 0x4d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x84, 0x01,
	0x0a, 0x0e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x49, 0x4d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x27, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x49, 0x4d, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x77, 0x65, 0x62, 0x69,
	0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x49, 0x4d, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x12, 0x9c, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49,
	0x4d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74,
	0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x49, 0x4d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x49, 0x4d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x5a, 0x15, 0x12, 0x13, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x69, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x20, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6d, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x8c, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x4d,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65,
	0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x4d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x2e, 0x49, 0x4d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x22, 0x20, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x8c, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x4d, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x4d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x73, 0x2e, 0x49, 0x4d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x1a,
	0x20, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0xcb, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x4d, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x4d,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x49, 0x4d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x6e, 0x3a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5a, 0x36, 0x3a, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x32, 0x2d, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6d, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x65, 0x74, 0x61, 0x67, 0x7d,
	0x1a, 0x2d, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x65, 0x74, 0x61, 0x67, 0x7d, 0x12,
	0x85, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x4d, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x28, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x4d, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x2e, 0x49, 0x4d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x28, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x22, 0x2a, 0x20, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6d,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x49, 0x4d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x2e, 0x77, 0x65, 0x62,
	0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x49, 0x4d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x2e, 0x49, 0x4d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22,
	0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x2a, 0x27, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x69, 0x6d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x65, 0x74, 0x61, 0x67, 0x7d,
	0x42, 0x22, 0x5a, 0x20, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2e, 0x67, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x3b, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_contacts_imclients_proto_rawDescOnce sync.Once
	file_contacts_imclients_proto_rawDescData = file_contacts_imclients_proto_rawDesc
)

func file_contacts_imclients_proto_rawDescGZIP() []byte {
	file_contacts_imclients_proto_rawDescOnce.Do(func() {
		file_contacts_imclients_proto_rawDescData = protoimpl.X.CompressGZIP(file_contacts_imclients_proto_rawDescData)
	})
	return file_contacts_imclients_proto_rawDescData
}

var file_contacts_imclients_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_contacts_imclients_proto_goTypes = []interface{}{
	(*IMClient)(nil),               // 0: webitel.contacts.IMClient
	(*InputIMClient)(nil),          // 1: webitel.contacts.InputIMClient
	(*IMClientList)(nil),           // 2: webitel.contacts.IMClientList
	(*LocateIMClientRequest)(nil),  // 3: webitel.contacts.LocateIMClientRequest
	(*SearchIMClientsRequest)(nil), // 4: webitel.contacts.SearchIMClientsRequest
	(*CreateIMClientsRequest)(nil), // 5: webitel.contacts.CreateIMClientsRequest
	(*UpdateIMClientsRequest)(nil), // 6: webitel.contacts.UpdateIMClientsRequest
	(*UpdateIMClientRequest)(nil),  // 7: webitel.contacts.UpdateIMClientRequest
	(*DeleteIMClientsRequest)(nil), // 8: webitel.contacts.DeleteIMClientsRequest
	(*DeleteIMClientRequest)(nil),  // 9: webitel.contacts.DeleteIMClientRequest
	(*Lookup)(nil),                 // 10: webitel.contacts.Lookup
}
var file_contacts_imclients_proto_depIdxs = []int32{
	10, // 0: webitel.contacts.IMClient.created_by:type_name -> webitel.contacts.Lookup
	10, // 1: webitel.contacts.IMClient.updated_by:type_name -> webitel.contacts.Lookup
	10, // 2: webitel.contacts.IMClient.user:type_name -> webitel.contacts.Lookup
	10, // 3: webitel.contacts.IMClient.app:type_name -> webitel.contacts.Lookup
	10, // 4: webitel.contacts.InputIMClient.user:type_name -> webitel.contacts.Lookup
	10, // 5: webitel.contacts.InputIMClient.app:type_name -> webitel.contacts.Lookup
	0,  // 6: webitel.contacts.IMClientList.data:type_name -> webitel.contacts.IMClient
	1,  // 7: webitel.contacts.CreateIMClientsRequest.input:type_name -> webitel.contacts.InputIMClient
	1,  // 8: webitel.contacts.UpdateIMClientsRequest.input:type_name -> webitel.contacts.InputIMClient
	1,  // 9: webitel.contacts.UpdateIMClientRequest.input:type_name -> webitel.contacts.InputIMClient
	3,  // 10: webitel.contacts.IMClients.LocateIMClient:input_type -> webitel.contacts.LocateIMClientRequest
	4,  // 11: webitel.contacts.IMClients.SearchIMClients:input_type -> webitel.contacts.SearchIMClientsRequest
	5,  // 12: webitel.contacts.IMClients.CreateIMClients:input_type -> webitel.contacts.CreateIMClientsRequest
	6,  // 13: webitel.contacts.IMClients.UpdateIMClients:input_type -> webitel.contacts.UpdateIMClientsRequest
	7,  // 14: webitel.contacts.IMClients.UpdateIMClient:input_type -> webitel.contacts.UpdateIMClientRequest
	8,  // 15: webitel.contacts.IMClients.DeleteIMClients:input_type -> webitel.contacts.DeleteIMClientsRequest
	9,  // 16: webitel.contacts.IMClients.DeleteIMClient:input_type -> webitel.contacts.DeleteIMClientRequest
	0,  // 17: webitel.contacts.IMClients.LocateIMClient:output_type -> webitel.contacts.IMClient
	2,  // 18: webitel.contacts.IMClients.SearchIMClients:output_type -> webitel.contacts.IMClientList
	2,  // 19: webitel.contacts.IMClients.CreateIMClients:output_type -> webitel.contacts.IMClientList
	2,  // 20: webitel.contacts.IMClients.UpdateIMClients:output_type -> webitel.contacts.IMClientList
	0,  // 21: webitel.contacts.IMClients.UpdateIMClient:output_type -> webitel.contacts.IMClient
	2,  // 22: webitel.contacts.IMClients.DeleteIMClients:output_type -> webitel.contacts.IMClientList
	0,  // 23: webitel.contacts.IMClients.DeleteIMClient:output_type -> webitel.contacts.IMClient
	17, // [17:24] is the sub-list for method output_type
	10, // [10:17] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_contacts_imclients_proto_init() }
func file_contacts_imclients_proto_init() {
	if File_contacts_imclients_proto != nil {
		return
	}
	file_contacts_fields_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_contacts_imclients_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contacts_imclients_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputIMClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contacts_imclients_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IMClientList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contacts_imclients_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocateIMClientRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contacts_imclients_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchIMClientsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contacts_imclients_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIMClientsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contacts_imclients_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIMClientsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contacts_imclients_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateIMClientRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contacts_imclients_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIMClientsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contacts_imclients_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIMClientRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_contacts_imclients_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_contacts_imclients_proto_goTypes,
		DependencyIndexes: file_contacts_imclients_proto_depIdxs,
		MessageInfos:      file_contacts_imclients_proto_msgTypes,
	}.Build()
	File_contacts_imclients_proto = out.File
	file_contacts_imclients_proto_rawDesc = nil
	file_contacts_imclients_proto_goTypes = nil
	file_contacts_imclients_proto_depIdxs = nil
}
