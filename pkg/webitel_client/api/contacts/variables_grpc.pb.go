// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.6
// source: contacts/variables.proto

package contacts

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Variables_ListVariables_FullMethodName = "/webitel.contacts.Variables/ListVariables"
	Variables_AddVariables_FullMethodName  = "/webitel.contacts.Variables/AddVariables"
	Variables_SetVariables_FullMethodName  = "/webitel.contacts.Variables/SetVariables"
	Variables_SetVariable_FullMethodName   = "/webitel.contacts.Variables/SetVariable"
	Variables_DelVariables_FullMethodName  = "/webitel.contacts.Variables/DelVariables"
	Variables_DelVariable_FullMethodName   = "/webitel.contacts.Variables/DelVariable"
)

// VariablesClient is the client API for Variables service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VariablesClient interface {
	// List variables of the contact
	ListVariables(ctx context.Context, in *SearchVariablesRequest, opts ...grpc.CallOption) (*VariableList, error)
	// Add variables to the contact
	AddVariables(ctx context.Context, in *CreateVariablesRequest, opts ...grpc.CallOption) (*VariableList, error)
	// Reset all variables of the contact
	SetVariables(ctx context.Context, in *UpdateVariablesRequest, opts ...grpc.CallOption) (*VariableList, error)
	// Update value of the contact variable
	SetVariable(ctx context.Context, in *UpdateVariableRequest, opts ...grpc.CallOption) (*Variable, error)
	// Remove variable(s) of the contact
	DelVariables(ctx context.Context, in *DeleteVariablesRequest, opts ...grpc.CallOption) (*VariableList, error)
	// Remove the contact's variable by key
	DelVariable(ctx context.Context, in *DeleteVariableRequest, opts ...grpc.CallOption) (*Variable, error)
}

type variablesClient struct {
	cc grpc.ClientConnInterface
}

func NewVariablesClient(cc grpc.ClientConnInterface) VariablesClient {
	return &variablesClient{cc}
}

func (c *variablesClient) ListVariables(ctx context.Context, in *SearchVariablesRequest, opts ...grpc.CallOption) (*VariableList, error) {
	out := new(VariableList)
	err := c.cc.Invoke(ctx, Variables_ListVariables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *variablesClient) AddVariables(ctx context.Context, in *CreateVariablesRequest, opts ...grpc.CallOption) (*VariableList, error) {
	out := new(VariableList)
	err := c.cc.Invoke(ctx, Variables_AddVariables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *variablesClient) SetVariables(ctx context.Context, in *UpdateVariablesRequest, opts ...grpc.CallOption) (*VariableList, error) {
	out := new(VariableList)
	err := c.cc.Invoke(ctx, Variables_SetVariables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *variablesClient) SetVariable(ctx context.Context, in *UpdateVariableRequest, opts ...grpc.CallOption) (*Variable, error) {
	out := new(Variable)
	err := c.cc.Invoke(ctx, Variables_SetVariable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *variablesClient) DelVariables(ctx context.Context, in *DeleteVariablesRequest, opts ...grpc.CallOption) (*VariableList, error) {
	out := new(VariableList)
	err := c.cc.Invoke(ctx, Variables_DelVariables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *variablesClient) DelVariable(ctx context.Context, in *DeleteVariableRequest, opts ...grpc.CallOption) (*Variable, error) {
	out := new(Variable)
	err := c.cc.Invoke(ctx, Variables_DelVariable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VariablesServer is the server API for Variables service.
// All implementations must embed UnimplementedVariablesServer
// for forward compatibility
type VariablesServer interface {
	// List variables of the contact
	ListVariables(context.Context, *SearchVariablesRequest) (*VariableList, error)
	// Add variables to the contact
	AddVariables(context.Context, *CreateVariablesRequest) (*VariableList, error)
	// Reset all variables of the contact
	SetVariables(context.Context, *UpdateVariablesRequest) (*VariableList, error)
	// Update value of the contact variable
	SetVariable(context.Context, *UpdateVariableRequest) (*Variable, error)
	// Remove variable(s) of the contact
	DelVariables(context.Context, *DeleteVariablesRequest) (*VariableList, error)
	// Remove the contact's variable by key
	DelVariable(context.Context, *DeleteVariableRequest) (*Variable, error)
	mustEmbedUnimplementedVariablesServer()
}

// UnimplementedVariablesServer must be embedded to have forward compatible implementations.
type UnimplementedVariablesServer struct {
}

func (UnimplementedVariablesServer) ListVariables(context.Context, *SearchVariablesRequest) (*VariableList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVariables not implemented")
}
func (UnimplementedVariablesServer) AddVariables(context.Context, *CreateVariablesRequest) (*VariableList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVariables not implemented")
}
func (UnimplementedVariablesServer) SetVariables(context.Context, *UpdateVariablesRequest) (*VariableList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVariables not implemented")
}
func (UnimplementedVariablesServer) SetVariable(context.Context, *UpdateVariableRequest) (*Variable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVariable not implemented")
}
func (UnimplementedVariablesServer) DelVariables(context.Context, *DeleteVariablesRequest) (*VariableList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelVariables not implemented")
}
func (UnimplementedVariablesServer) DelVariable(context.Context, *DeleteVariableRequest) (*Variable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelVariable not implemented")
}
func (UnimplementedVariablesServer) mustEmbedUnimplementedVariablesServer() {}

// UnsafeVariablesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VariablesServer will
// result in compilation errors.
type UnsafeVariablesServer interface {
	mustEmbedUnimplementedVariablesServer()
}

func RegisterVariablesServer(s grpc.ServiceRegistrar, srv VariablesServer) {
	s.RegisterService(&Variables_ServiceDesc, srv)
}

func _Variables_ListVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchVariablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VariablesServer).ListVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Variables_ListVariables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VariablesServer).ListVariables(ctx, req.(*SearchVariablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Variables_AddVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVariablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VariablesServer).AddVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Variables_AddVariables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VariablesServer).AddVariables(ctx, req.(*CreateVariablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Variables_SetVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVariablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VariablesServer).SetVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Variables_SetVariables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VariablesServer).SetVariables(ctx, req.(*UpdateVariablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Variables_SetVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VariablesServer).SetVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Variables_SetVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VariablesServer).SetVariable(ctx, req.(*UpdateVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Variables_DelVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVariablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VariablesServer).DelVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Variables_DelVariables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VariablesServer).DelVariables(ctx, req.(*DeleteVariablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Variables_DelVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VariablesServer).DelVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Variables_DelVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VariablesServer).DelVariable(ctx, req.(*DeleteVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Variables_ServiceDesc is the grpc.ServiceDesc for Variables service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Variables_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webitel.contacts.Variables",
	HandlerType: (*VariablesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListVariables",
			Handler:    _Variables_ListVariables_Handler,
		},
		{
			MethodName: "AddVariables",
			Handler:    _Variables_AddVariables_Handler,
		},
		{
			MethodName: "SetVariables",
			Handler:    _Variables_SetVariables_Handler,
		},
		{
			MethodName: "SetVariable",
			Handler:    _Variables_SetVariable_Handler,
		},
		{
			MethodName: "DelVariables",
			Handler:    _Variables_DelVariables_Handler,
		},
		{
			MethodName: "DelVariable",
			Handler:    _Variables_DelVariable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contacts/variables.proto",
}
