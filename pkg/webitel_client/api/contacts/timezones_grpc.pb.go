// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.6
// source: contacts/timezones.proto

package contacts

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Timezones_GetContactTimezones_FullMethodName = "/webitel.contacts.Timezones/GetContactTimezones"
	Timezones_AddContactTimezones_FullMethodName = "/webitel.contacts.Timezones/AddContactTimezones"
	Timezones_SetContactTimezones_FullMethodName = "/webitel.contacts.Timezones/SetContactTimezones"
	Timezones_SetContactTimezone_FullMethodName  = "/webitel.contacts.Timezones/SetContactTimezone"
	Timezones_DelContactTimezones_FullMethodName = "/webitel.contacts.Timezones/DelContactTimezones"
	Timezones_DelContactTimezone_FullMethodName  = "/webitel.contacts.Timezones/DelContactTimezone"
)

// TimezonesClient is the client API for Timezones service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimezonesClient interface {
	// List of the Contact's language association(s).
	GetContactTimezones(ctx context.Context, in *SearchTimezonesRequest, opts ...grpc.CallOption) (*TimezoneList, error)
	// Associate more language(s) with the Contact.
	AddContactTimezones(ctx context.Context, in *CreateTimezonesRequest, opts ...grpc.CallOption) (*TimezoneList, error)
	// Reset all Contact's languages to fit the specified fixed set.
	SetContactTimezones(ctx context.Context, in *UpdateTimezonesRequest, opts ...grpc.CallOption) (*TimezoneList, error)
	// Update the Contact's language association details.
	SetContactTimezone(ctx context.Context, in *UpdateTimezoneRequest, opts ...grpc.CallOption) (*TimezoneList, error)
	// Remove the Contact's language association(s).
	DelContactTimezones(ctx context.Context, in *DeleteTimezonesRequest, opts ...grpc.CallOption) (*TimezoneList, error)
	// Remove the Contact's language association.
	DelContactTimezone(ctx context.Context, in *DeleteTimezoneRequest, opts ...grpc.CallOption) (*Timezone, error)
}

type timezonesClient struct {
	cc grpc.ClientConnInterface
}

func NewTimezonesClient(cc grpc.ClientConnInterface) TimezonesClient {
	return &timezonesClient{cc}
}

func (c *timezonesClient) GetContactTimezones(ctx context.Context, in *SearchTimezonesRequest, opts ...grpc.CallOption) (*TimezoneList, error) {
	out := new(TimezoneList)
	err := c.cc.Invoke(ctx, Timezones_GetContactTimezones_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timezonesClient) AddContactTimezones(ctx context.Context, in *CreateTimezonesRequest, opts ...grpc.CallOption) (*TimezoneList, error) {
	out := new(TimezoneList)
	err := c.cc.Invoke(ctx, Timezones_AddContactTimezones_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timezonesClient) SetContactTimezones(ctx context.Context, in *UpdateTimezonesRequest, opts ...grpc.CallOption) (*TimezoneList, error) {
	out := new(TimezoneList)
	err := c.cc.Invoke(ctx, Timezones_SetContactTimezones_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timezonesClient) SetContactTimezone(ctx context.Context, in *UpdateTimezoneRequest, opts ...grpc.CallOption) (*TimezoneList, error) {
	out := new(TimezoneList)
	err := c.cc.Invoke(ctx, Timezones_SetContactTimezone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timezonesClient) DelContactTimezones(ctx context.Context, in *DeleteTimezonesRequest, opts ...grpc.CallOption) (*TimezoneList, error) {
	out := new(TimezoneList)
	err := c.cc.Invoke(ctx, Timezones_DelContactTimezones_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timezonesClient) DelContactTimezone(ctx context.Context, in *DeleteTimezoneRequest, opts ...grpc.CallOption) (*Timezone, error) {
	out := new(Timezone)
	err := c.cc.Invoke(ctx, Timezones_DelContactTimezone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimezonesServer is the server API for Timezones service.
// All implementations must embed UnimplementedTimezonesServer
// for forward compatibility
type TimezonesServer interface {
	// List of the Contact's language association(s).
	GetContactTimezones(context.Context, *SearchTimezonesRequest) (*TimezoneList, error)
	// Associate more language(s) with the Contact.
	AddContactTimezones(context.Context, *CreateTimezonesRequest) (*TimezoneList, error)
	// Reset all Contact's languages to fit the specified fixed set.
	SetContactTimezones(context.Context, *UpdateTimezonesRequest) (*TimezoneList, error)
	// Update the Contact's language association details.
	SetContactTimezone(context.Context, *UpdateTimezoneRequest) (*TimezoneList, error)
	// Remove the Contact's language association(s).
	DelContactTimezones(context.Context, *DeleteTimezonesRequest) (*TimezoneList, error)
	// Remove the Contact's language association.
	DelContactTimezone(context.Context, *DeleteTimezoneRequest) (*Timezone, error)
	mustEmbedUnimplementedTimezonesServer()
}

// UnimplementedTimezonesServer must be embedded to have forward compatible implementations.
type UnimplementedTimezonesServer struct {
}

func (UnimplementedTimezonesServer) GetContactTimezones(context.Context, *SearchTimezonesRequest) (*TimezoneList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContactTimezones not implemented")
}
func (UnimplementedTimezonesServer) AddContactTimezones(context.Context, *CreateTimezonesRequest) (*TimezoneList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddContactTimezones not implemented")
}
func (UnimplementedTimezonesServer) SetContactTimezones(context.Context, *UpdateTimezonesRequest) (*TimezoneList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetContactTimezones not implemented")
}
func (UnimplementedTimezonesServer) SetContactTimezone(context.Context, *UpdateTimezoneRequest) (*TimezoneList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetContactTimezone not implemented")
}
func (UnimplementedTimezonesServer) DelContactTimezones(context.Context, *DeleteTimezonesRequest) (*TimezoneList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelContactTimezones not implemented")
}
func (UnimplementedTimezonesServer) DelContactTimezone(context.Context, *DeleteTimezoneRequest) (*Timezone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelContactTimezone not implemented")
}
func (UnimplementedTimezonesServer) mustEmbedUnimplementedTimezonesServer() {}

// UnsafeTimezonesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimezonesServer will
// result in compilation errors.
type UnsafeTimezonesServer interface {
	mustEmbedUnimplementedTimezonesServer()
}

func RegisterTimezonesServer(s grpc.ServiceRegistrar, srv TimezonesServer) {
	s.RegisterService(&Timezones_ServiceDesc, srv)
}

func _Timezones_GetContactTimezones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTimezonesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimezonesServer).GetContactTimezones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Timezones_GetContactTimezones_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimezonesServer).GetContactTimezones(ctx, req.(*SearchTimezonesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Timezones_AddContactTimezones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTimezonesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimezonesServer).AddContactTimezones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Timezones_AddContactTimezones_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimezonesServer).AddContactTimezones(ctx, req.(*CreateTimezonesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Timezones_SetContactTimezones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTimezonesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimezonesServer).SetContactTimezones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Timezones_SetContactTimezones_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimezonesServer).SetContactTimezones(ctx, req.(*UpdateTimezonesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Timezones_SetContactTimezone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTimezoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimezonesServer).SetContactTimezone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Timezones_SetContactTimezone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimezonesServer).SetContactTimezone(ctx, req.(*UpdateTimezoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Timezones_DelContactTimezones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTimezonesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimezonesServer).DelContactTimezones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Timezones_DelContactTimezones_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimezonesServer).DelContactTimezones(ctx, req.(*DeleteTimezonesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Timezones_DelContactTimezone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTimezoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimezonesServer).DelContactTimezone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Timezones_DelContactTimezone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimezonesServer).DelContactTimezone(ctx, req.(*DeleteTimezoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Timezones_ServiceDesc is the grpc.ServiceDesc for Timezones service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Timezones_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webitel.contacts.Timezones",
	HandlerType: (*TimezonesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetContactTimezones",
			Handler:    _Timezones_GetContactTimezones_Handler,
		},
		{
			MethodName: "AddContactTimezones",
			Handler:    _Timezones_AddContactTimezones_Handler,
		},
		{
			MethodName: "SetContactTimezones",
			Handler:    _Timezones_SetContactTimezones_Handler,
		},
		{
			MethodName: "SetContactTimezone",
			Handler:    _Timezones_SetContactTimezone_Handler,
		},
		{
			MethodName: "DelContactTimezones",
			Handler:    _Timezones_DelContactTimezones_Handler,
		},
		{
			MethodName: "DelContactTimezone",
			Handler:    _Timezones_DelContactTimezone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contacts/timezones.proto",
}
