syntax = "proto3";

package api;
option go_package = "webitel.go/api;api";

import "oid.proto";

service Customers {

    rpc ServerInfo(ServerInfoRequest) returns (ServerInfoResponse) {}
    // rpc GetCertificate(CertificateUsageRequest) returns (CertificateUsageResponse) {}
    rpc GetCustomer(GetCustomerRequest) returns (GetCustomerResponse) {}
    rpc UpdateCustomer(UpdateCustomerRequest) returns (UpdateCustomerResponse) {}
    rpc LicenseUsage(LicenseUsageRequest) returns (LicenseUsageResponse) {}
    // // rpc VerifyCertificate(VerifyCertificateRequest) returns (VerifyCertificateResponse) {}
    // rpc UpdateCertificate(UpdateCertificateRequest) returns (UpdateCertificateResponse) {}
    // // later: rpc RevokeCertificate(RevokeCertificateRequest) returns (RevokeCertificateResponse) {}
    // rpc SearchCertificates(SearchCertificatesRequest) returns (SearchCertificatesResponse) {}
}

message ServerInfoRequest {}
message ServerInfoResponse {
    // int64 time = 1; // current timestamp (ms)
    bytes key = 1;
}

message Verification {
    repeated string errors = 1; // invalid 
    repeated string notify = 2; // non-fatal warnings, e.g.: 
}

// USAGE details
message LicenseUser {
    string id = 1; // license.id
    string prod = 2; // license.prod
    ObjectId user = 3; // grant to::user
    int64 issued_at = 4; // not before
    int64 expires_at = 5; // not after
    repeated string scope = 6; // setof objclass
}

// message LicenseId {
//     string id = 1;
//     string product = 2;
// }

message LicenseV1 {

    string id = 1; // serial number assigned (global::License-ID)
    int64 not_before = 2; // optional
    int64 not_after = 3; // optional
    string product = 4; // product name, e.g.: DEVICE, MANAGER, OPERATOR
    repeated string scope = 5; // list of known classes, &this product grants mandatory access to, e.g.: 'users', 'roles', 'cc_agent', 'calendars', ...
    int32 limit = 6; // required: limit count (maximum allowed usage quantity)
    // operational attributes ...
    // remain = limit - len(users)
    int32 remain = 7; // available 
    repeated LicenseUser users = 8; // users.id (grantees)
    Verification status = 9;
}

message Customer {

    string id = 1; // serial number assigned (global::Customer-ID)
    // string version = 2; // version
    // local store details
    int64 created_at = 2;   // local created ms
    int64 updated_at = 3;   // last uploaded ms
    int64 revoked_at = 4;   // local revoked ms
    // registration name
    string organization = 5;
    // validity boundaries
    int64 issued_at = 6;    // [required] issuer(CA) created at
    int64 not_before = 7;   // [optional] valid from
    int64 not_after = 8;    // [required] valid till
    // signature validity
    int64 this_update = 9;  // [optional]: issuer(CA) signed at
    int64 next_update = 10; // [optional]: signature expires; update required after
    // Verification status
    Verification verify = 11; // [optional] validation results
    // extensions granted
    map<string,int32> limit = 12; // defines map[class]limit usage
    int32 competitive = 13; // zero-based competitive sessions limit ?
    repeated LicenseV1 license = 14; // grants issued
    repeated ObjectId dnsrv = 15; // [optional] domains
}

// GET /users/{user.id}/license
// GET /domains/{domain.id}/license
// GET /license/{filter=**}
message LicenseUsageRequest {
    // Available Filters
    ObjectId user = 1; // to user assigned
    ObjectId domain = 2; 
    string customer_id = 3;
    repeated string serial = 4; // by serial number(s)
    repeated string product = 5; // by product name(s)
    bool valid = 6; // show: available to be granted
    // Request Controls
    repeated string fields = 10; // serial,
    repeated string sort = 11;
}

message LicenseUsageResponse {
    // repeated customer = 1; // detailed
    repeated LicenseV1 license = 1;
}

// GET /customer:sessionCustomer
// GET /customers/{id}
message GetCustomerRequest {
    // Available Filters
    string id = 1; // show by customer id; serial number (uuid)
    bool valid = 2; // show if valid only!
    ObjectId domain = 3; // find by domain relation
    // Request Controls
    repeated string fields = 10; // serial, 
    repeated string sort = 11;
}

message GetCustomerResponse {
    Customer customer = 1;
}

// PUT /customer
message UpdateCustomerRequest {
    string organization = 1; // [optional] e.g.: Example Org.
    bytes logo_picture = 2;  // [optional] logo source image
    bytes certificate = 3;  // [optional] raw bytes protobuf::base64.RawStdEncoding != certificate::base64.StdEncoding
    bool revoke = 4;
}

message UpdateCustomerResponse {
    Customer customer = 1; // detailed
}

/*/ GET /certificates
message SearchCertificatesRequest {
    string domain = 1;
}

message SearchCertificatesResponse {
    repeated Customer certificates = 1;
}
*/